import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.Timer;

/*
 * This class is created to test simple animation of a rectangular object.
 * @author kperiyasamy
 * created on Pct 30, 2015
 */

public class AnimationTest extends JFrame implements ActionListener {
    private Bubble bubble1, bubble2;
    private Eye le1,re1;
    private EyeBall leb,reb;
    private Smile sm;
    private Timer timer;
    private String direction;
    public AnimationTest ()  {
        this.setTitle (" Animation Test");
        this.setBounds (25,25,600,600);
        this.getContentPane().setBackground(Color.WHITE);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible (true);
        this.setLayout(null);
        //
        // Create two bubble objects
        //
        le1 = new Eye(230,260,40,40);
        le1.setVisible (true);
        this.getContentPane().add (le1);
        this.repaint();
        re1 = new Eye(325,260,40,40);
        re1.setVisible (true);
        this.getContentPane().add (re1);
        this.repaint();
        leb = new EyeBall(230,270,20,20);
        leb.setVisible (true);
        this.getContentPane().add (leb);
        this.repaint();
        reb = new EyeBall(325,270,20,20);
        reb.setVisible (true);
        this.getContentPane().add (reb);
        this.repaint();
        sm = new Smile(120,150,40,40);
        sm.setVisible (true);
        this.getContentPane().add (sm);
        this.repaint();
        bubble1 = new Bubble (200,200, 200, 200);
        bubble1.setVisible (true);
        this.getContentPane().add (bubble1);
        this.repaint();
        bubble2 = new Bubble (400,400, 50, 50);
        bubble2.setVisible (true);
        this.getContentPane().add (bubble2);
        this.repaint();
        direction = "south";
        // Create the timer and start it.
        //
          timer = new Timer (500, this); // read Timer's specification
          timer.start();
    }
    
    /**
     * This method will be called for every event generated by the timer. The
     * timer generates an event based on the time set in its constructor.
     * @param e the action event generated by the timer
    */
    public void actionPerformed (ActionEvent e) {
        //
        // increase the size of both bubbles
        //
//        bubble1.setSize(bubble1.getWidth()+10, bubble1.getHeight()+10);
//        bubble2.setSize(bubble2.getWidth()+10, bubble2.getHeight()+10);
        //
        // move both bubbles towards each other
        //
//        timer.start();
        //System.out.println(direction);
        switch(direction){
            case "south" : leb.setLocation(leb.getX()+10, leb.getY()+10);
            reb.setLocation (reb.getX()+10, reb.getY()+10);
            direction = "east";
            break;
            case "east" : leb.setLocation(leb.getX()+10, leb.getY()-10);
            reb.setLocation (reb.getX()+10, reb.getY()-10);
            direction = "north";
            break;
            case "north" : leb.setLocation(leb.getX()-10, leb.getY()-10);
            reb.setLocation (reb.getX()-10, reb.getY()-10);
            direction = "west";
            break;
            case "west" : leb.setLocation(leb.getX()-10, leb.getY()+10);
            reb.setLocation (reb.getX()-10, reb.getY()+10);
            direction = "south";
            break;
        }
//        
//        if(direction.equalsIgnoreCase("south") ){
//            
//        }
//        if(direction == "east"){
//            
//        }
//        if(direction == "north"){
//            
//        }
//        if(direction == "west"){
//            
//        }
        this.repaint();
//        
//        leb.setLocation (leb.getX()-10, leb.getY()-10);
//        reb.setLocation (reb.getX()-10, reb.getY()-10);
        //
        // if they intersect each other, terminate the loop and stop
        // the animation.
        // The circles touch or overlap each other if the distance between
        // their centers is less than or equal to the sum of their radii.
        //
//        double dist = distance (bubble1.getCenterX(), 
//                                bubble1.getCenterY(),
//                                bubble2.getCenterX(),
//                                bubble2.getCenterY());
//        if (dist <= (bubble1.getWidth()/2) + (bubble2.getWidth()/2)) {
//            timer.stop();
//        }        
//        this.repaint();
    }
    
    /**
     * This method calculates the distance between two points P1 and P2.
     * d = sqrt ((P1.X - P2.X)*(P1.X - P2.X) + (P1.Y - P2.Y)*(P1.Y - P2.Y))
     * @param p1x the x coordinate of the first point
     * @param p1y the y coordinate of the first point
     * @param p2x the x coordinate of the second point
     * @param p2y the y coordinate of the second point
     * @return the distance between two points P1 and P2. 
     */
    
//    private double distance (int p1x, int p1y, int p2x, int p2y) {
//        return Math.sqrt ((p1x - p2x)*(p1x - p2x) + (p1y - p2y)*(p1y-p2y));
//    }
    
    public static void main (String[] args) {
        AnimationTest atest = new AnimationTest();
    }
}
